-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\gm_mpu6050_interface\ADXL345_ip_src_AXI4LiteRead.vhd
-- Created: 2017-11-30 11:08:49
-- 
-- Generated by MATLAB 9.2 and HDL Coder 3.10
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ADXL345_ip_src_AXI4LiteRead
-- Source Path: gm_mpu6050_interface/I2C_MPU6050_IP/AXI4LiteRead
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ADXL345_ip_src_AXI4LiteRead IS
  PORT( Out1                              :   OUT   std_logic;
        Out2                              :   OUT   std_logic;
        Out3                              :   OUT   std_logic;
        Out4                              :   OUT   std_logic;
        Out5                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Out6                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Out7                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Out8                              :   OUT   std_logic;
        Out9                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Out10                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Out11                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Out12                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Out13                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
        );
END ADXL345_ip_src_AXI4LiteRead;


ARCHITECTURE rtl OF ADXL345_ip_src_AXI4LiteRead IS

  -- Component Declarations
  COMPONENT ADXL345_ip_src_AXI4Lite_Read_AccelX
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT ADXL345_ip_src_AXI4Lite_Read_AccelY
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT ADXL345_ip_src_AXI4Lite_Read_AccelZ
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT ADXL345_ip_src_AXI4Lite_Read_validout
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT ADXL345_ip_src_AXI4Lite_Read_deviceID
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT ADXL345_ip_src_AXI4Lite_Read_RegData
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT ADXL345_ip_src_AXI4Lite_Read_GyroX
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT ADXL345_ip_src_AXI4Lite_Read_GyroY
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT ADXL345_ip_src_AXI4Lite_Read_GyroZ
    PORT( Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_AccelX
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_AccelX(rtl);

  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_AccelY
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_AccelY(rtl);

  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_AccelZ
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_AccelZ(rtl);

  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_validout
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_validout(rtl);

  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_deviceID
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_deviceID(rtl);

  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_RegData
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_RegData(rtl);

  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_GyroX
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_GyroX(rtl);

  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_GyroY
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_GyroY(rtl);

  FOR ALL : ADXL345_ip_src_AXI4Lite_Read_GyroZ
    USE ENTITY work.ADXL345_ip_src_AXI4Lite_Read_GyroZ(rtl);

  -- Signals
  SIGNAL GROUND_CS_out1                   : std_logic;
  SIGNAL EXTERNALPORT_CS_DTC_out1         : std_logic;
  SIGNAL GROUND_ADDRALT_out1              : std_logic;
  SIGNAL EXTERNALPORT_ADDRALT_DTC_out1    : std_logic;
  SIGNAL GROUND_SCL_out1                  : std_logic;
  SIGNAL EXTERNALPORT_SCL_DTC_out1        : std_logic;
  SIGNAL GROUND_SDA_out1                  : std_logic;
  SIGNAL EXTERNALPORT_SDA_DTC_out1        : std_logic;
  SIGNAL AXI4Lite_Read_AccelX_out1        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_AccelX_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_AccelX_DTC_out1    : signed(15 DOWNTO 0);  -- int16
  SIGNAL AXI4Lite_Read_AccelY_out1        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_AccelY_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_AccelY_DTC_out1    : signed(15 DOWNTO 0);  -- int16
  SIGNAL AXI4Lite_Read_AccelZ_out1        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_AccelZ_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_AccelZ_DTC_out1    : signed(15 DOWNTO 0);  -- int16
  SIGNAL AXI4Lite_Read_validout_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_validout_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_validout_DTC_out1  : std_logic;
  SIGNAL AXI4Lite_Read_deviceID_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_deviceID_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_deviceID_DTC_out1  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL AXI4Lite_Read_RegData_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_RegData_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_RegData_DTC_out1   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL AXI4Lite_Read_GyroX_out1         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_GyroX_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_GyroX_DTC_out1     : signed(15 DOWNTO 0);  -- int16
  SIGNAL AXI4Lite_Read_GyroY_out1         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_GyroY_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_GyroY_DTC_out1     : signed(15 DOWNTO 0);  -- int16
  SIGNAL AXI4Lite_Read_GyroZ_out1         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4Lite_Read_GyroZ_out1_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL AXI4Lite_Read_GyroZ_DTC_out1     : signed(15 DOWNTO 0);  -- int16

BEGIN
  -- <S2>/AXI4Lite_Read_AccelX
  u_AXI4Lite_Read_AccelX : ADXL345_ip_src_AXI4Lite_Read_AccelX
    PORT MAP( Out1 => AXI4Lite_Read_AccelX_out1  -- uint32
              );

  -- <S2>/AXI4Lite_Read_AccelY
  u_AXI4Lite_Read_AccelY : ADXL345_ip_src_AXI4Lite_Read_AccelY
    PORT MAP( Out1 => AXI4Lite_Read_AccelY_out1  -- uint32
              );

  -- <S2>/AXI4Lite_Read_AccelZ
  u_AXI4Lite_Read_AccelZ : ADXL345_ip_src_AXI4Lite_Read_AccelZ
    PORT MAP( Out1 => AXI4Lite_Read_AccelZ_out1  -- uint32
              );

  -- <S2>/AXI4Lite_Read_validout
  u_AXI4Lite_Read_validout : ADXL345_ip_src_AXI4Lite_Read_validout
    PORT MAP( Out1 => AXI4Lite_Read_validout_out1  -- uint32
              );

  -- <S2>/AXI4Lite_Read_deviceID
  u_AXI4Lite_Read_deviceID : ADXL345_ip_src_AXI4Lite_Read_deviceID
    PORT MAP( Out1 => AXI4Lite_Read_deviceID_out1  -- uint32
              );

  -- <S2>/AXI4Lite_Read_RegData
  u_AXI4Lite_Read_RegData : ADXL345_ip_src_AXI4Lite_Read_RegData
    PORT MAP( Out1 => AXI4Lite_Read_RegData_out1  -- uint32
              );

  -- <S2>/AXI4Lite_Read_GyroX
  u_AXI4Lite_Read_GyroX : ADXL345_ip_src_AXI4Lite_Read_GyroX
    PORT MAP( Out1 => AXI4Lite_Read_GyroX_out1  -- uint32
              );

  -- <S2>/AXI4Lite_Read_GyroY
  u_AXI4Lite_Read_GyroY : ADXL345_ip_src_AXI4Lite_Read_GyroY
    PORT MAP( Out1 => AXI4Lite_Read_GyroY_out1  -- uint32
              );

  -- <S2>/AXI4Lite_Read_GyroZ
  u_AXI4Lite_Read_GyroZ : ADXL345_ip_src_AXI4Lite_Read_GyroZ
    PORT MAP( Out1 => AXI4Lite_Read_GyroZ_out1  -- uint32
              );

  -- <S2>/GROUND_CS
  GROUND_CS_out1 <= '0';

  -- <S2>/EXTERNALPORT_CS_DTC
  
  EXTERNALPORT_CS_DTC_out1 <= '1' WHEN GROUND_CS_out1 /= '0' ELSE
      '0';

  -- <S2>/GROUND_ADDRALT
  GROUND_ADDRALT_out1 <= '0';

  -- <S2>/EXTERNALPORT_ADDRALT_DTC
  
  EXTERNALPORT_ADDRALT_DTC_out1 <= '1' WHEN GROUND_ADDRALT_out1 /= '0' ELSE
      '0';

  -- <S2>/GROUND_SCL
  GROUND_SCL_out1 <= '0';

  -- <S2>/EXTERNALPORT_SCL_DTC
  
  EXTERNALPORT_SCL_DTC_out1 <= '1' WHEN GROUND_SCL_out1 /= '0' ELSE
      '0';

  -- <S2>/GROUND_SDA
  GROUND_SDA_out1 <= '0';

  -- <S2>/EXTERNALPORT_SDA_DTC
  
  EXTERNALPORT_SDA_DTC_out1 <= '1' WHEN GROUND_SDA_out1 /= '0' ELSE
      '0';

  AXI4Lite_Read_AccelX_out1_unsigned <= unsigned(AXI4Lite_Read_AccelX_out1);

  -- <S2>/AXI4Lite_Read_AccelX_DTC
  AXI4Lite_Read_AccelX_DTC_out1 <= signed(AXI4Lite_Read_AccelX_out1_unsigned(15 DOWNTO 0));

  Out5 <= std_logic_vector(AXI4Lite_Read_AccelX_DTC_out1);

  AXI4Lite_Read_AccelY_out1_unsigned <= unsigned(AXI4Lite_Read_AccelY_out1);

  -- <S2>/AXI4Lite_Read_AccelY_DTC
  AXI4Lite_Read_AccelY_DTC_out1 <= signed(AXI4Lite_Read_AccelY_out1_unsigned(15 DOWNTO 0));

  Out6 <= std_logic_vector(AXI4Lite_Read_AccelY_DTC_out1);

  AXI4Lite_Read_AccelZ_out1_unsigned <= unsigned(AXI4Lite_Read_AccelZ_out1);

  -- <S2>/AXI4Lite_Read_AccelZ_DTC
  AXI4Lite_Read_AccelZ_DTC_out1 <= signed(AXI4Lite_Read_AccelZ_out1_unsigned(15 DOWNTO 0));

  Out7 <= std_logic_vector(AXI4Lite_Read_AccelZ_DTC_out1);

  AXI4Lite_Read_validout_out1_unsigned <= unsigned(AXI4Lite_Read_validout_out1);

  -- <S2>/AXI4Lite_Read_validout_DTC
  
  AXI4Lite_Read_validout_DTC_out1 <= '1' WHEN AXI4Lite_Read_validout_out1_unsigned /= to_unsigned(0, 32) ELSE
      '0';

  AXI4Lite_Read_deviceID_out1_unsigned <= unsigned(AXI4Lite_Read_deviceID_out1);

  -- <S2>/AXI4Lite_Read_deviceID_DTC
  AXI4Lite_Read_deviceID_DTC_out1 <= AXI4Lite_Read_deviceID_out1_unsigned(7 DOWNTO 0);

  Out9 <= std_logic_vector(AXI4Lite_Read_deviceID_DTC_out1);

  AXI4Lite_Read_RegData_out1_unsigned <= unsigned(AXI4Lite_Read_RegData_out1);

  -- <S2>/AXI4Lite_Read_RegData_DTC
  AXI4Lite_Read_RegData_DTC_out1 <= AXI4Lite_Read_RegData_out1_unsigned(7 DOWNTO 0);

  Out10 <= std_logic_vector(AXI4Lite_Read_RegData_DTC_out1);

  AXI4Lite_Read_GyroX_out1_unsigned <= unsigned(AXI4Lite_Read_GyroX_out1);

  -- <S2>/AXI4Lite_Read_GyroX_DTC
  AXI4Lite_Read_GyroX_DTC_out1 <= signed(AXI4Lite_Read_GyroX_out1_unsigned(15 DOWNTO 0));

  Out11 <= std_logic_vector(AXI4Lite_Read_GyroX_DTC_out1);

  AXI4Lite_Read_GyroY_out1_unsigned <= unsigned(AXI4Lite_Read_GyroY_out1);

  -- <S2>/AXI4Lite_Read_GyroY_DTC
  AXI4Lite_Read_GyroY_DTC_out1 <= signed(AXI4Lite_Read_GyroY_out1_unsigned(15 DOWNTO 0));

  Out12 <= std_logic_vector(AXI4Lite_Read_GyroY_DTC_out1);

  AXI4Lite_Read_GyroZ_out1_unsigned <= unsigned(AXI4Lite_Read_GyroZ_out1);

  -- <S2>/AXI4Lite_Read_GyroZ_DTC
  AXI4Lite_Read_GyroZ_DTC_out1 <= signed(AXI4Lite_Read_GyroZ_out1_unsigned(15 DOWNTO 0));

  Out13 <= std_logic_vector(AXI4Lite_Read_GyroZ_DTC_out1);

  Out1 <= EXTERNALPORT_CS_DTC_out1;

  Out2 <= EXTERNALPORT_ADDRALT_DTC_out1;

  Out3 <= EXTERNALPORT_SCL_DTC_out1;

  Out4 <= EXTERNALPORT_SDA_DTC_out1;

  Out8 <= AXI4Lite_Read_validout_DTC_out1;

END rtl;

