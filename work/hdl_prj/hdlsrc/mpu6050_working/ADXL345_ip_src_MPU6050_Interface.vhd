-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\mpu6050_working\ADXL345_ip_src_MPU6050_Interface.vhd
-- Created: 2017-12-03 22:48:36
-- 
-- Generated by MATLAB 9.2 and HDL Coder 3.10
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ADXL345_ip_src_MPU6050_Interface
-- Source Path: mpu6050_working/I2C_MPU6050_IP/MPU6050_Interface
-- Hierarchy Level: 1
-- 
-- I2C Configuration for MPU6050
-- 0x3B 59 ACCEL_XOUT[15:8] 
-- 0x3C 60 ACCEL_XOUT[7:0] 
-- 0x3D 61 ACCEL_YOUT[15:8] 
-- 0x3E 62 ACCEL_YOUT[7:0] 
-- 0x3F 63 ACCEL_ZOUT[15:8] 
-- 0x40 64 ACCEL_ZOUT[7:0]
-- 
-- 0x43 67 GYRO_XOUT[15:8] 
-- 0x44 68 GYRO_XOUT[7:0] 
-- 0x45 69 GYRO_YOUT[15:8] 
-- 0x46 70 GYRO_YOUT[7:0] 
-- 0x47 71 GYRO_ZOUT[15:8] 
-- 0x48 72 GYRO_ZOUT[7:0]
-- 
-- 0x6B 107 PWR_MGMT_1
-- 0x6C 108 PWR_MGMT_2
-- 
-- DEVID is an example of
-- doing a 1-byte READ
-- 0x75 117 - WHO_AM_I[6:1]
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ADXL345_ip_src_I2C_MPU6050_IP_pkg.ALL;

ENTITY ADXL345_ip_src_MPU6050_Interface IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        busy                              :   IN    std_logic;
        n_ack                             :   IN    std_logic;
        byte_mode                         :   IN    std_logic;
        reg_mode                          :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        mstr_ack                          :   IN    std_logic;
        userRegAddr                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        configDevice                      :   IN    std_logic;
        enb_1                             :   OUT   std_logic;
        rw                                :   OUT   std_logic;
        mode                              :   OUT   std_logic;
        slv_addr                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        reg_addr                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        reg_byte_mode                     :   OUT   std_logic;
        data_out                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        AccelX                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        AccelY                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        AccelZ                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        Valid_Out                         :   OUT   std_logic;
        deviceId                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        regdata                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        GyroX                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        GyroY                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        GyroZ                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
        isDeviceSetup                     :   OUT   std_logic
        );
END ADXL345_ip_src_MPU6050_Interface;


ARCHITECTURE rtl OF ADXL345_ip_src_MPU6050_Interface IS

  -- Constants
  CONSTANT b_SlvAddr                      : unsigned(7 DOWNTO 0) := 
    to_unsigned(16#68#, 8);  -- uint8

  -- Signals
  SIGNAL data_in_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL userRegAddr_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL is_MPU6050_Interface             : T_state_type_is_MPU6050_Interface;  -- uint8
  SIGNAL cnt                              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL tempVal                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL enb_2                            : std_logic;
  SIGNAL slv_addr_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_addr_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_out_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL AccelX_tmp                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL AccelY_tmp                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL AccelZ_tmp                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL deviceId_tmp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL regdata_tmp                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL GyroX_tmp                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL GyroY_tmp                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL GyroZ_tmp                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL enb_reg                          : std_logic;
  SIGNAL rw_reg                           : std_logic;
  SIGNAL mode_reg                         : std_logic;
  SIGNAL slv_addr_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_addr_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_byte_mode_reg                : std_logic;
  SIGNAL data_out_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL AccelX_reg                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL AccelY_reg                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL AccelZ_reg                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Valid_Out_reg                    : std_logic;
  SIGNAL deviceId_reg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL regdata_reg                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL GyroX_reg                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL GyroY_reg                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL GyroZ_reg                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL isDeviceSetup_reg                : std_logic;
  SIGNAL is_MPU6050_Interface_next        : T_state_type_is_MPU6050_Interface;  -- enum type state_type_is_MPU6050_Interface (58 enums)
  SIGNAL cnt_next                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL tempVal_next                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL enb_reg_next                     : std_logic;
  SIGNAL rw_reg_next                      : std_logic;
  SIGNAL mode_reg_next                    : std_logic;
  SIGNAL slv_addr_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_addr_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL reg_byte_mode_reg_next           : std_logic;
  SIGNAL data_out_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL AccelX_reg_next                  : signed(15 DOWNTO 0);  -- int16
  SIGNAL AccelY_reg_next                  : signed(15 DOWNTO 0);  -- int16
  SIGNAL AccelZ_reg_next                  : signed(15 DOWNTO 0);  -- int16
  SIGNAL Valid_Out_reg_next               : std_logic;
  SIGNAL deviceId_reg_next                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL regdata_reg_next                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL GyroX_reg_next                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL GyroY_reg_next                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL GyroZ_reg_next                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL isDeviceSetup_reg_next           : std_logic;

BEGIN
  data_in_unsigned <= unsigned(data_in);

  userRegAddr_unsigned <= unsigned(userRegAddr);

  MPU6050_Interface_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        cnt <= to_unsigned(16#00000000#, 32);
        tempVal <= to_unsigned(16#00#, 8);
        enb_reg <= '0';
        rw_reg <= '0';
        mode_reg <= '0';
        reg_addr_reg <= to_unsigned(16#00#, 8);
        reg_byte_mode_reg <= '0';
        data_out_reg <= to_unsigned(16#00#, 8);
        AccelX_reg <= to_signed(16#0000#, 16);
        AccelY_reg <= to_signed(16#0000#, 16);
        AccelZ_reg <= to_signed(16#0000#, 16);
        deviceId_reg <= to_unsigned(16#00#, 8);
        regdata_reg <= to_unsigned(16#00#, 8);
        GyroX_reg <= to_signed(16#0000#, 16);
        GyroY_reg <= to_signed(16#0000#, 16);
        GyroZ_reg <= to_signed(16#0000#, 16);
        --Entry: I2C_MPU6050_IP/MPU6050_Interface
        --Entry Internal: I2C_MPU6050_IP/MPU6050_Interface
        --Transition: '<S13>:575'
        is_MPU6050_Interface <= IN_init;
        --Entry 'init': '<S13>:2177'
        --initstate
        Valid_Out_reg <= '0';
        isDeviceSetup_reg <= '1';
        slv_addr_reg <= b_SlvAddr;
      ELSIF enb = '1' THEN
        is_MPU6050_Interface <= is_MPU6050_Interface_next;
        cnt <= cnt_next;
        tempVal <= tempVal_next;
        enb_reg <= enb_reg_next;
        rw_reg <= rw_reg_next;
        mode_reg <= mode_reg_next;
        slv_addr_reg <= slv_addr_reg_next;
        reg_addr_reg <= reg_addr_reg_next;
        reg_byte_mode_reg <= reg_byte_mode_reg_next;
        data_out_reg <= data_out_reg_next;
        AccelX_reg <= AccelX_reg_next;
        AccelY_reg <= AccelY_reg_next;
        AccelZ_reg <= AccelZ_reg_next;
        Valid_Out_reg <= Valid_Out_reg_next;
        deviceId_reg <= deviceId_reg_next;
        regdata_reg <= regdata_reg_next;
        GyroX_reg <= GyroX_reg_next;
        GyroY_reg <= GyroY_reg_next;
        GyroZ_reg <= GyroZ_reg_next;
        isDeviceSetup_reg <= isDeviceSetup_reg_next;
      END IF;
    END IF;
  END PROCESS MPU6050_Interface_process;

  MPU6050_Interface_output : PROCESS (is_MPU6050_Interface, busy, n_ack, cnt, data_in_unsigned, mstr_ack, tempVal,
       userRegAddr_unsigned, configDevice, enb_reg, rw_reg, mode_reg,
       slv_addr_reg, reg_addr_reg, reg_byte_mode_reg, data_out_reg, AccelX_reg,
       AccelY_reg, AccelZ_reg, Valid_Out_reg, deviceId_reg, regdata_reg,
       GyroX_reg, GyroY_reg, GyroZ_reg, isDeviceSetup_reg)
    VARIABLE add_temp : unsigned(32 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(32 DOWNTO 0);
    VARIABLE cast : signed(15 DOWNTO 0);
    VARIABLE cast_0 : signed(15 DOWNTO 0);
    VARIABLE cast_1 : signed(15 DOWNTO 0);
    VARIABLE cast_2 : signed(15 DOWNTO 0);
    VARIABLE cast_3 : signed(15 DOWNTO 0);
    VARIABLE cast_4 : signed(15 DOWNTO 0);
    VARIABLE cast_5 : signed(15 DOWNTO 0);
    VARIABLE cast_6 : signed(15 DOWNTO 0);
    VARIABLE cast_7 : signed(15 DOWNTO 0);
    VARIABLE cast_8 : signed(15 DOWNTO 0);
    VARIABLE cast_9 : signed(15 DOWNTO 0);
    VARIABLE cast_10 : signed(15 DOWNTO 0);
  BEGIN
    enb_reg_next <= enb_reg;
    rw_reg_next <= rw_reg;
    mode_reg_next <= mode_reg;
    slv_addr_reg_next <= slv_addr_reg;
    reg_addr_reg_next <= reg_addr_reg;
    reg_byte_mode_reg_next <= reg_byte_mode_reg;
    data_out_reg_next <= data_out_reg;
    AccelX_reg_next <= AccelX_reg;
    AccelY_reg_next <= AccelY_reg;
    AccelZ_reg_next <= AccelZ_reg;
    Valid_Out_reg_next <= Valid_Out_reg;
    deviceId_reg_next <= deviceId_reg;
    regdata_reg_next <= regdata_reg;
    GyroX_reg_next <= GyroX_reg;
    GyroY_reg_next <= GyroY_reg;
    GyroZ_reg_next <= GyroZ_reg;
    isDeviceSetup_reg_next <= isDeviceSetup_reg;
    is_MPU6050_Interface_next <= is_MPU6050_Interface;
    cnt_next <= cnt;
    tempVal_next <= tempVal;
    --Gateway: I2C_MPU6050_IP/MPU6050_Interface
    --During: I2C_MPU6050_IP/MPU6050_Interface
    CASE is_MPU6050_Interface IS
      WHEN IN_cfgDone =>
        --During 'cfgDone': '<S13>:2447'
        --Transition: '<S13>:2804'
        is_MPU6050_Interface_next <= IN_setupReadAccelXoutH;
        --Entry 'setupReadAccelXoutH': '<S13>:2727'
        enb_reg_next <= '1';
        rw_reg_next <= '1';
        mode_reg_next <= '0';
        reg_addr_reg_next <= to_unsigned(16#3B#, 8);
        --0x3b
      WHEN IN_readPwrManagement1 =>
        --During 'readPwrManagement1': '<S13>:2516'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2808'
          is_MPU6050_Interface_next <= IN_setupFS_SEL;
          --Entry 'setupFS_SEL': '<S13>:2809'
          enb_reg_next <= '1';
          rw_reg_next <= '0';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#1B#, 8);
          --0x1b
          data_out_reg_next <= to_unsigned(16#10#, 8);
          --fs range +/- 1000
        END IF;
      WHEN IN_readWhoAmI1 =>
        --During 'readWhoAmI1': '<S13>:2471'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2468'
          is_MPU6050_Interface_next <= IN_setupReadPwrMgmt1;
          --Entry 'setupReadPwrMgmt1': '<S13>:2512'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#6B#, 8);
        END IF;
      WHEN IN_setupFS_SEL =>
        data_out_reg_next <= to_unsigned(16#10#, 8);
        --During 'setupFS_SEL': '<S13>:2809'
        IF busy = '1' THEN 
          --Transition: '<S13>:2806'
          is_MPU6050_Interface_next <= IN_waitforNotBusy3;
          --Entry 'waitforNotBusy3': '<S13>:2807'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadPwrMgmt1 =>
        --During 'setupReadPwrMgmt1': '<S13>:2512'
        IF busy = '1' THEN 
          --Transition: '<S13>:2513'
          is_MPU6050_Interface_next <= IN_waitforNotBusy1;
          --Entry 'waitforNotBusy1': '<S13>:2514'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadWhoAmI =>
        --During 'setupReadWhoAmI': '<S13>:2466'
        IF busy = '1' THEN 
          --Transition: '<S13>:2467'
          is_MPU6050_Interface_next <= IN_waitforNotBusy0;
          --Entry 'waitforNotBusy0': '<S13>:2465'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupWritePwrMgmt1 =>
        data_out_reg_next <= to_unsigned(16#00#, 8);
        --During 'setupWritePwrMgmt1': '<S13>:2404'
        IF busy = '1' THEN 
          --Transition: '<S13>:2407'
          is_MPU6050_Interface_next <= IN_waitforNotBusy2;
          --Entry 'waitforNotBusy2': '<S13>:2380'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_waitforNotBusy0 =>
        --During 'waitforNotBusy0': '<S13>:2465'
        IF n_ack = '1' THEN 
          --Transition: '<S13>:2469'
          --Transition: '<S13>:2280'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        ELSIF mstr_ack = '1' THEN 
          --Transition: '<S13>:2470'
          is_MPU6050_Interface_next <= IN_readWhoAmI1;
          --Entry 'readWhoAmI1': '<S13>:2471'
          --tmpData = uint8(data_in);
        END IF;
      WHEN IN_waitforNotBusy1 =>
        --During 'waitforNotBusy1': '<S13>:2514'
        IF n_ack = '1' THEN 
          --Transition: '<S13>:2518'
          --Transition: '<S13>:2280'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        ELSIF mstr_ack = '1' THEN 
          --Transition: '<S13>:2515'
          is_MPU6050_Interface_next <= IN_readPwrManagement1;
          --Entry 'readPwrManagement1': '<S13>:2516'
          --tmpData = uint8(data_in);
        END IF;
      WHEN IN_waitforNotBusy2 =>
        --During 'waitforNotBusy2': '<S13>:2380'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2448'
          is_MPU6050_Interface_next <= IN_cfgDone;
          --Entry 'cfgDone': '<S13>:2447'
          isDeviceSetup_reg_next <= '1';
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2455'
          --Transition: '<S13>:2280'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusy3 =>
        --During 'waitforNotBusy3': '<S13>:2807'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2517'
          is_MPU6050_Interface_next <= IN_setupWritePwrMgmt1;
          --Entry 'setupWritePwrMgmt1': '<S13>:2404'
          enb_reg_next <= '1';
          rw_reg_next <= '0';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#6B#, 8);
          --0x6B
          data_out_reg_next <= to_unsigned(16#00#, 8);
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2810'
          --Transition: '<S13>:2280'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_readAccelXoutH =>
        --During 'readAccelXoutH': '<S13>:2729'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2721'
          is_MPU6050_Interface_next <= IN_setupReadAccelXoutL;
          --Entry 'setupReadAccelXoutL': '<S13>:2746'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#3C#, 8);
          --0x3c
        END IF;
      WHEN IN_readAccelXoutL =>
        --During 'readAccelXoutL': '<S13>:2732'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2737'
          is_MPU6050_Interface_next <= IN_setupReadAccelYoutH;
          --Entry 'setupReadAccelYoutH': '<S13>:2733'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#3D#, 8);
          --0x3d
        END IF;
      WHEN IN_readAccelYoutH =>
        --During 'readAccelYoutH': '<S13>:2731'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2723'
          is_MPU6050_Interface_next <= IN_setupReadAccelYoutL;
          --Entry 'setupReadAccelYoutL': '<S13>:2743'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#3E#, 8);
          --0x3e
        END IF;
      WHEN IN_readAccelZoutH =>
        --During 'readAccelZoutH': '<S13>:2718'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2795'
          is_MPU6050_Interface_next <= IN_setupReadAccelZoutL;
          --Entry 'setupReadAccelZoutL': '<S13>:2734'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#40#, 8);
          --0x40
        END IF;
      WHEN IN_readAccelZoutL =>
        --During 'readAccelZoutL': '<S13>:2744'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2801'
          is_MPU6050_Interface_next <= IN_setupReadGyroXoutH;
          --Entry 'setupReadGyroXoutH': '<S13>:2766'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#43#, 8);
          --0x43
        END IF;
      WHEN IN_readGyroYoutL =>
        --During 'readGyroYoutL': '<S13>:2747'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2790'
          is_MPU6050_Interface_next <= IN_setupReadAccelZoutH;
          --Entry 'setupReadAccelZoutH': '<S13>:2739'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#3F#, 8);
          --0x3f
        END IF;
      WHEN IN_setupReadAccelXoutH =>
        --During 'setupReadAccelXoutH': '<S13>:2727'
        IF busy = '1' THEN 
          --Transition: '<S13>:2726'
          is_MPU6050_Interface_next <= IN_waitforNotBusya1;
          --Entry 'waitforNotBusya1': '<S13>:2741'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadAccelXoutL =>
        --During 'setupReadAccelXoutL': '<S13>:2746'
        IF busy = '1' THEN 
          --Transition: '<S13>:2715'
          is_MPU6050_Interface_next <= IN_waitforNotBusya3;
          --Entry 'waitforNotBusya3': '<S13>:2730'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadAccelYoutH =>
        --During 'setupReadAccelYoutH': '<S13>:2733'
        IF busy = '1' THEN 
          --Transition: '<S13>:2712'
          is_MPU6050_Interface_next <= IN_waitforNotBusya4;
          --Entry 'waitforNotBusya4': '<S13>:2742'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadAccelYoutL =>
        --During 'setupReadAccelYoutL': '<S13>:2743'
        IF busy = '1' THEN 
          --Transition: '<S13>:2724'
          is_MPU6050_Interface_next <= IN_waitforNotBusya5;
          --Entry 'waitforNotBusya5': '<S13>:2740'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadAccelZoutH =>
        --During 'setupReadAccelZoutH': '<S13>:2739'
        IF busy = '1' THEN 
          --Transition: '<S13>:2772'
          is_MPU6050_Interface_next <= IN_waitforNotBusya6;
          --Entry 'waitforNotBusya6': '<S13>:2717'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadAccelZoutL =>
        --During 'setupReadAccelZoutL': '<S13>:2734'
        IF busy = '1' THEN 
          --Transition: '<S13>:2798'
          is_MPU6050_Interface_next <= IN_waitforNotBusya7;
          --Entry 'waitforNotBusya7': '<S13>:2728'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_waitforNotBusya1 =>
        --During 'waitforNotBusya1': '<S13>:2741'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2722'
          is_MPU6050_Interface_next <= IN_readAccelXoutH;
          --Entry 'readAccelXoutH': '<S13>:2729'
          tempVal_next <= data_in_unsigned;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2745'
          --Transition: '<S13>:2805'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusya3 =>
        --During 'waitforNotBusya3': '<S13>:2730'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2736'
          is_MPU6050_Interface_next <= IN_readAccelXoutL;
          --Entry 'readAccelXoutL': '<S13>:2732'
          --MATLAB Function 'convert_int16': '<S13>:2274'
          --'<S13>:2274:3'
          cast := signed(resize(tempVal, 16));
          cast_0 := signed(resize(data_in_unsigned, 16));
          AccelX_reg_next <= (cast sll 8) OR cast_0;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2719'
          --Transition: '<S13>:2805'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusya4 =>
        --During 'waitforNotBusya4': '<S13>:2742'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2713'
          is_MPU6050_Interface_next <= IN_readAccelYoutH;
          --Entry 'readAccelYoutH': '<S13>:2731'
          tempVal_next <= data_in_unsigned;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2716'
          --Transition: '<S13>:2805'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusya5 =>
        --During 'waitforNotBusya5': '<S13>:2740'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2725'
          is_MPU6050_Interface_next <= IN_readGyroYoutL;
          --Entry 'readGyroYoutL': '<S13>:2747'
          --MATLAB Function 'convert_int16': '<S13>:2274'
          --'<S13>:2274:3'
          cast_1 := signed(resize(tempVal, 16));
          cast_2 := signed(resize(data_in_unsigned, 16));
          AccelY_reg_next <= (cast_1 sll 8) OR cast_2;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2738'
          --Transition: '<S13>:2805'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusya6 =>
        --During 'waitforNotBusya6': '<S13>:2717'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2773'
          is_MPU6050_Interface_next <= IN_readAccelZoutH;
          --Entry 'readAccelZoutH': '<S13>:2718'
          tempVal_next <= data_in_unsigned;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2720'
          --Transition: '<S13>:2805'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusya7 =>
        --During 'waitforNotBusya7': '<S13>:2728'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2752'
          is_MPU6050_Interface_next <= IN_readAccelZoutL;
          --Entry 'readAccelZoutL': '<S13>:2744'
          --MATLAB Function 'convert_int16': '<S13>:2274'
          --'<S13>:2274:3'
          cast_3 := signed(resize(tempVal, 16));
          cast_4 := signed(resize(data_in_unsigned, 16));
          AccelZ_reg_next <= (cast_3 sll 8) OR cast_4;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2748'
          --Transition: '<S13>:2805'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_debuggingState =>
        --During 'debuggingState': '<S13>:2463'
        --Transition: '<S13>:2464'
        --Transition: '<S13>:2282'
        is_MPU6050_Interface_next <= IN_check_cfg;
        --Entry 'check_cfg': '<S13>:2166'
        enb_reg_next <= '0';
        cnt_next <= to_unsigned(16#00000000#, 32);
      WHEN IN_getDEVID =>
        --During 'getDEVID': '<S13>:2209'
        IF busy = '1' THEN 
          --Transition: '<S13>:2228'
          is_MPU6050_Interface_next <= b_IN_waitforNotBusy1;
          --Entry 'waitforNotBusy1': '<S13>:2227'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_getRegData =>
        --During 'getRegData': '<S13>:2239'
        IF busy = '1' THEN 
          --Transition: '<S13>:2241'
          is_MPU6050_Interface_next <= IN_waitforNotBusy5;
          --Entry 'waitforNotBusy5': '<S13>:2240'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_readDEVID =>
        --During 'readDEVID': '<S13>:2214'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2248'
          is_MPU6050_Interface_next <= IN_getRegData;
          --Entry 'getRegData': '<S13>:2239'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= userRegAddr_unsigned;
        END IF;
      WHEN IN_readUserRegData =>
        --During 'readUserRegData': '<S13>:2242'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2803'
          is_MPU6050_Interface_next <= IN_setupReadAccelXoutH;
          --Entry 'setupReadAccelXoutH': '<S13>:2727'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#3B#, 8);
          --0x3b
        END IF;
      WHEN b_IN_waitforNotBusy1 =>
        --During 'waitforNotBusy1': '<S13>:2227'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2210'
          is_MPU6050_Interface_next <= IN_readDEVID;
          --Entry 'readDEVID': '<S13>:2214'
          deviceId_reg_next <= data_in_unsigned;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2236'
          is_MPU6050_Interface_next <= IN_debuggingState;
          --Entry 'debuggingState': '<S13>:2463'
          --tmp = 1
        END IF;
      WHEN IN_waitforNotBusy5 =>
        --During 'waitforNotBusy5': '<S13>:2240'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2243'
          is_MPU6050_Interface_next <= IN_readUserRegData;
          --Entry 'readUserRegData': '<S13>:2242'
          regdata_reg_next <= data_in_unsigned;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2249'
          --Transition: '<S13>:2282'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_readGyroXoutH =>
        --During 'readGyroXoutH': '<S13>:2754'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2791'
          is_MPU6050_Interface_next <= IN_setupReadGyroXoutL;
          --Entry 'setupReadGyroXoutL': '<S13>:2762'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#44#, 8);
          --0x44
        END IF;
      WHEN IN_readGyroXoutL =>
        --During 'readGyroXoutL': '<S13>:2775'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2753'
          is_MPU6050_Interface_next <= IN_setupReadGyroYoutH;
          --Entry 'setupReadGyroYoutH': '<S13>:2783'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#45#, 8);
          --0x45
        END IF;
      WHEN IN_readGyroYoutH =>
        --During 'readGyroYoutH': '<S13>:2786'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2788'
          is_MPU6050_Interface_next <= IN_setupReadGyroYoutL;
          --Entry 'setupReadGyroYoutL': '<S13>:2756'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#46#, 8);
          --0x46
        END IF;
      WHEN b_IN_readGyroYoutL =>
        --During 'readGyroYoutL': '<S13>:2763'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2767'
          is_MPU6050_Interface_next <= IN_setupReadGyroZoutH;
          --Entry 'setupReadGyroZoutH': '<S13>:2784'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#47#, 8);
          --0x47
        END IF;
      WHEN IN_readGyroZoutH =>
        --During 'readGyroZoutH': '<S13>:2793'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2768'
          is_MPU6050_Interface_next <= IN_setupReadGyroZoutL;
          --Entry 'setupReadGyroZoutL': '<S13>:2797'
          enb_reg_next <= '1';
          rw_reg_next <= '1';
          mode_reg_next <= '0';
          reg_addr_reg_next <= to_unsigned(16#48#, 8);
          --0x48
        END IF;
      WHEN IN_readGyroZoutL =>
        --During 'readGyroZoutL': '<S13>:2785'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2782'
          --Transition: '<S13>:2800'
          is_MPU6050_Interface_next <= IN_Valid;
          --Entry 'Valid': '<S13>:2150'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
          Valid_Out_reg_next <= '1';
        END IF;
      WHEN IN_setupReadGyroXoutH =>
        --During 'setupReadGyroXoutH': '<S13>:2766'
        IF busy = '1' THEN 
          --Transition: '<S13>:2759'
          is_MPU6050_Interface_next <= IN_waitforNotBusy06;
          --Entry 'waitforNotBusy06': '<S13>:2796'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadGyroXoutL =>
        --During 'setupReadGyroXoutL': '<S13>:2762'
        IF busy = '1' THEN 
          --Transition: '<S13>:2770'
          is_MPU6050_Interface_next <= IN_waitforNotBusy07;
          --Entry 'waitforNotBusy07': '<S13>:2751'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadGyroYoutH =>
        --During 'setupReadGyroYoutH': '<S13>:2783'
        IF busy = '1' THEN 
          --Transition: '<S13>:2755'
          is_MPU6050_Interface_next <= IN_waitforNotBusy04;
          --Entry 'waitforNotBusy04': '<S13>:2776'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadGyroYoutL =>
        --During 'setupReadGyroYoutL': '<S13>:2756'
        IF busy = '1' THEN 
          --Transition: '<S13>:2781'
          is_MPU6050_Interface_next <= IN_waitforNotBusy05;
          --Entry 'waitforNotBusy05': '<S13>:2792'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadGyroZoutH =>
        --During 'setupReadGyroZoutH': '<S13>:2784'
        IF busy = '1' THEN 
          --Transition: '<S13>:2760'
          is_MPU6050_Interface_next <= IN_waitforNotBusy01;
          --Entry 'waitforNotBusy01': '<S13>:2789'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_setupReadGyroZoutL =>
        --During 'setupReadGyroZoutL': '<S13>:2797'
        IF busy = '1' THEN 
          --Transition: '<S13>:2769'
          is_MPU6050_Interface_next <= IN_waitforNotBusy03;
          --Entry 'waitforNotBusy03': '<S13>:2757'
          enb_reg_next <= '0';
        END IF;
      WHEN IN_waitforNotBusy01 =>
        --During 'waitforNotBusy01': '<S13>:2789'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2761'
          is_MPU6050_Interface_next <= IN_readGyroZoutH;
          --Entry 'readGyroZoutH': '<S13>:2793'
          tempVal_next <= data_in_unsigned;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2780'
          --Transition: '<S13>:2802'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusy03 =>
        --During 'waitforNotBusy03': '<S13>:2757'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2771'
          is_MPU6050_Interface_next <= IN_readGyroZoutL;
          --Entry 'readGyroZoutL': '<S13>:2785'
          --MATLAB Function 'convert_int16': '<S13>:2274'
          --'<S13>:2274:3'
          cast_5 := signed(resize(tempVal, 16));
          cast_6 := signed(resize(data_in_unsigned, 16));
          GyroZ_reg_next <= (cast_5 sll 8) OR cast_6;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2749'
          --Transition: '<S13>:2802'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusy04 =>
        --During 'waitforNotBusy04': '<S13>:2776'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2758'
          is_MPU6050_Interface_next <= IN_readGyroYoutH;
          --Entry 'readGyroYoutH': '<S13>:2786'
          tempVal_next <= data_in_unsigned;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2794'
          --Transition: '<S13>:2802'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusy05 =>
        --During 'waitforNotBusy05': '<S13>:2792'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2765'
          is_MPU6050_Interface_next <= b_IN_readGyroYoutL;
          --Entry 'readGyroYoutL': '<S13>:2763'
          --MATLAB Function 'convert_int16': '<S13>:2274'
          --'<S13>:2274:3'
          cast_7 := signed(resize(tempVal, 16));
          cast_8 := signed(resize(data_in_unsigned, 16));
          GyroY_reg_next <= (cast_7 sll 8) OR cast_8;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2779'
          --Transition: '<S13>:2802'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusy06 =>
        --During 'waitforNotBusy06': '<S13>:2796'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2777'
          is_MPU6050_Interface_next <= IN_readGyroXoutH;
          --Entry 'readGyroXoutH': '<S13>:2754'
          tempVal_next <= data_in_unsigned;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2750'
          --Transition: '<S13>:2802'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_waitforNotBusy07 =>
        --During 'waitforNotBusy07': '<S13>:2751'
        IF mstr_ack = '1' THEN 
          --Transition: '<S13>:2764'
          is_MPU6050_Interface_next <= IN_readGyroXoutL;
          --Entry 'readGyroXoutL': '<S13>:2775'
          --MATLAB Function 'convert_int16': '<S13>:2274'
          --'<S13>:2274:3'
          cast_9 := signed(resize(tempVal, 16));
          cast_10 := signed(resize(data_in_unsigned, 16));
          GyroX_reg_next <= (cast_9 sll 8) OR cast_10;
        ELSIF n_ack = '1' THEN 
          --Transition: '<S13>:2787'
          --Transition: '<S13>:2802'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        END IF;
      WHEN IN_Valid =>
        --During 'Valid': '<S13>:2150'
        IF cnt >= to_unsigned(5, 32) THEN 
          --Transition: '<S13>:2151'
          is_MPU6050_Interface_next <= IN_check_cfg;
          --Entry 'check_cfg': '<S13>:2166'
          enb_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
        ELSE 
          add_temp := resize(cnt, 33) + to_unsigned(1, 33);
          IF add_temp(32) /= '0' THEN 
            cnt_next <= X"FFFFFFFF";
          ELSE 
            cnt_next <= add_temp(31 DOWNTO 0);
          END IF;
        END IF;
      WHEN IN_check_cfg =>
        --During 'check_cfg': '<S13>:2166'
        IF cnt >= to_unsigned(5, 32) THEN 
          --Transition: '<S13>:2167'
          is_MPU6050_Interface_next <= IN_idle;
          --Entry 'idle': '<S13>:763'
          --idlestate
          enb_reg_next <= '0';
          rw_reg_next <= '0';
          mode_reg_next <= '0';
          cnt_next <= to_unsigned(16#00000000#, 32);
          reg_byte_mode_reg_next <= '0';
        ELSE 
          add_temp_0 := resize(cnt, 33) + to_unsigned(1, 33);
          IF add_temp_0(32) /= '0' THEN 
            cnt_next <= X"FFFFFFFF";
          ELSE 
            cnt_next <= add_temp_0(31 DOWNTO 0);
          END IF;
        END IF;
      WHEN IN_idle =>
        --During 'idle': '<S13>:763'
        IF ( NOT busy) = '1' THEN 
          --Transition: '<S13>:2267'
          IF (configDevice OR ( NOT isDeviceSetup_reg)) /= '0' THEN 
            --Transition: '<S13>:753'
            is_MPU6050_Interface_next <= IN_setupReadWhoAmI;
            --Entry 'setupReadWhoAmI': '<S13>:2466'
            enb_reg_next <= '1';
            rw_reg_next <= '1';
            mode_reg_next <= '0';
            reg_addr_reg_next <= to_unsigned(16#75#, 8);
          ELSE 
            --Transition: '<S13>:2461'
            is_MPU6050_Interface_next <= IN_getDEVID;
            --Entry 'getDEVID': '<S13>:2209'
            enb_reg_next <= '1';
            rw_reg_next <= '1';
            mode_reg_next <= '0';
            reg_addr_reg_next <= to_unsigned(16#75#, 8);
          END IF;
        END IF;
      WHEN OTHERS => 
        slv_addr_reg_next <= b_SlvAddr;
        --During 'init': '<S13>:2177'
        --Transition: '<S13>:2178'
        is_MPU6050_Interface_next <= IN_idle;
        --Entry 'idle': '<S13>:763'
        --idlestate
        enb_reg_next <= '0';
        rw_reg_next <= '0';
        mode_reg_next <= '0';
        cnt_next <= to_unsigned(16#00000000#, 32);
        reg_byte_mode_reg_next <= '0';
    END CASE;
  END PROCESS MPU6050_Interface_output;

  enb_2 <= enb_reg_next;
  rw <= rw_reg_next;
  mode <= mode_reg_next;
  slv_addr_tmp <= slv_addr_reg_next;
  reg_addr_tmp <= reg_addr_reg_next;
  reg_byte_mode <= reg_byte_mode_reg_next;
  data_out_tmp <= data_out_reg_next;
  AccelX_tmp <= AccelX_reg_next;
  AccelY_tmp <= AccelY_reg_next;
  AccelZ_tmp <= AccelZ_reg_next;
  Valid_Out <= Valid_Out_reg_next;
  deviceId_tmp <= deviceId_reg_next;
  regdata_tmp <= regdata_reg_next;
  GyroX_tmp <= GyroX_reg_next;
  GyroY_tmp <= GyroY_reg_next;
  GyroZ_tmp <= GyroZ_reg_next;
  isDeviceSetup <= isDeviceSetup_reg_next;

  slv_addr <= std_logic_vector(slv_addr_tmp);

  reg_addr <= std_logic_vector(reg_addr_tmp);

  data_out <= std_logic_vector(data_out_tmp);

  AccelX <= std_logic_vector(AccelX_tmp);

  AccelY <= std_logic_vector(AccelY_tmp);

  AccelZ <= std_logic_vector(AccelZ_tmp);

  deviceId <= std_logic_vector(deviceId_tmp);

  regdata <= std_logic_vector(regdata_tmp);

  GyroX <= std_logic_vector(GyroX_tmp);

  GyroY <= std_logic_vector(GyroY_tmp);

  GyroZ <= std_logic_vector(GyroZ_tmp);

  enb_1 <= enb_2;

END rtl;

